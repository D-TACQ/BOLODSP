#!/bin/sh
# complete automated calibration run.
# customize with /mnt/local/sysconfig/bolo.sh
# runs under inetd at port 0xb010 (45072)
export PATH=$PATH:/usr/local/bin/

if [ ! -e /mnt/local/sysconfig/bolo.sh ]; then
cat - >/mnt/local/sysconfig/bolo.sh <<EOF
BOLO_ACTIVE_CHAN="1 2 3 4 5 6 7 8"
BOLO_VERBOSE=1
# to customize calibfit, change next line
# eg CALIBFITARGS="-H 0.85"
# available options:
# -C cooling_theshold -H heating_threshold -t t_wait -T tau_guess
CALIBFITARGS=""
set.site 14 DIODE_DROP_V ${1:-0.5}
set.site 14 TWAIT ${2:-0.1}
set.site 14 THEAT ${2:-1.0}
set.site 14 TCOOL ${3:-1.0}
set.site 14 VBIAS ${4:-1.0}
LOAD_POWER_FILTERS=1
EOF
fi
source /mnt/local/sysconfig/bolo.sh
reset.dsp

# For non-default calibfit operation eg
# calibfit [-C cooling_theshold] [-H heating_threshold] [-t t_wait] [-T tau_guess]
# edit /mnt/local/sysconfig/bolo.sh to suit
# CALIBFIT_ARGS="-H 0.85"
# Remove previous calibration results: we're only interested in the latest
rm /tmp/calibfit.log

[ "$CALIBFITARGS" != "" ] && echo "custom CALIBFITARGS $CALIBFITARGS"

rv() {
        [ $BOLO_VERBOSE ] && echo $*
        $*
}

fit_cal_ch() {
        ch=$1
        nsam=$2
        [ $BOLO_VERBOSE ] && (echo;echo;echo "fit_cal_ch $ch")

        /usr/local/bin/calibfit -n $nsam -c $ch $CALIBFITARGS 2>&1 >/tmp/pgm_calibfit.txt
        [ $BOLO_VERBOSE ] && cat /tmp/pgm_calibfit.txt
        grep "=" /tmp/pgm_calibfit.txt | tr -d \  > /tmp/pgm_calibfit.sh
        source /tmp/pgm_calibfit.sh

        rv load_offset_channel.tcl $ch $i0 $q0 $sens

        echo >>/tmp/calibfit.log calibration_data $ch $i0 $q0 $sens $tau

        echo $ch $sens $tau >> /tmp/senslogs.txt
}


[ $BOLO_VERBOSE ] && echo "calibration starts for channels \"$BOLO_ACTIVE_CHAN\""


for ch in $BOLO_ACTIVE_CHAN
do
         load_offset_channel.tcl $ch 0 0 1
done

reset.dsp

tcool=$(set.site 14 TCOOL)
theat=$(set.site 14 THEAT)
twait=$(set.site 14 TWAIT)
nsamples=$(expect -c "puts [expr { int(($tcool + $theat + $twait) * 1e4) }]")
post=$(($nsamples > 100000? $nsamples: 100000))

# System must be set up for soft trigger for calibration
orig_trg=$(get.site 1 trg | cut -d' ' -f1)
set.site 1 trg=1,1,1
set.site 0 "transient POST=$post SOFT_TRIGGER=0; set_arm"
wait_until_state 1

bolo_calibration

reset.dsp

for ch in $BOLO_ACTIVE_CHAN
do
        fit_cal_ch $ch $nsamples
done

# Copy calib data so it doesn't get overwritten
if [ $COPY_CALIB_DATA ]
then
    mkdir -p /tmp/calib_data
    for ch in $BOLO_ACTIVE_CHAN
    do
        site=$(((ch - 1) / 8 + 1))
        mkdir -p /tmp/calib_data/${site}
        ubol_chan=$(((ch - 1) % 8 * 3 + 1))
        phi_chan=$((ubol_chan + 1))
        dc_chan=$((phi_chan + 1))
        for chan in $ubol_chan $phi_chan $dc_chan
        do
            # 0-Pad to 2 digits
            pad=$(printf "%02d" $chan)
            cp /dev/acq400/data/${site}/${pad} /tmp/calib_data/${site}/${pad}
        done
    done
fi

if [ $LOAD_POWER_FILTERS ]; then
# Start running data through the filters so we can load multiple power filters
streamtonowhered start
until set.site 0 transient_state | grep -qe ^1
do
    sleep 0.1
done
soft_trigger
for ch in $BOLO_ACTIVE_CHAN
do
        fil_args=$(awk '$1=='$ch' {print $2, $3}' /tmp/senslogs.txt)
        rv power_filter_design.tcl $ch $fil_args
        rv /usr/local/bin/wait_for_filters nospawn
done
streamtonowhered stop
fi

# Restore previous triggering setup
set.site 1 $orig_trg

rm /tmp/senslogs.txt

/usr/local/bin/web_diagnostics_cal
/usr/local/bin/web_diagnostics_ram
echo "END"
