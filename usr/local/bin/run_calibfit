#!/bin/sh
# complete automated calibration run.
# customize with /mnt/local/sysconfig/bolo.sh
# runs under inetd at port 0xb010 (45072)
export PATH=$PATH:/usr/local/bin/

if [ ! -e /mnt/local/sysconfig/bolo.sh ]; then
cat - >/mnt/local/sysconfig/bolo.sh <<EOF
BOLO_ACTIVE_CHAN="1 2 3 4 5 6 7 8"
BOLO_VERBOSE=1
# to customize calibfit, change next line
# eg CALIBFITARGS="-H 0.85"
# available options:
# -C cooling_theshold -H heating_threshold -t t_wait -T tau_guess
CALIBFITARGS=""
set.site 14 DIODE_DROP_V ${1:-0.5}
set.site 14 TWAIT ${2:-0.1}
set.site 14 THEAT ${2:-1.0}
set.site 14 TCOOL ${3:-1.0}
set.site 14 VBIAS ${4:-1.0}
LOAD_POWER_FILTERS=1
BOLO_LOAD_OFFSETS=1
BOLO_GAIN=1V2
EOF
fi
. /mnt/local/sysconfig/bolo.sh

if [ -e /etc/acq400/14/BOLO_ACTIVE_CHAN ]; then
	bac=$(cat /etc/acq400/14/BOLO_ACTIVE_CHAN)
	if [ ! -z $bac ] && [ "$bac" != "default" ]; then
		BOLO_ACTIVE_CHAN=$(echo $bac | tr , \  )
	fi
fi

# Don't do anything if calibration is not enabled.
if [ "$(get.site 14 CAL_EN)" -eq 0 ]; then
    echo "CAL_EN=0: skipping calibration."
    echo "END"
    exit
fi

# Provide default values where necessary.
BOLO_VERBOSE=${BOLO_VERBOSE:-1}
LOAD_POWER_FILTERS=${LOAD_POWER_FILTERS:-1}
BOLO_LOAD_OFFSETS=${BOLO_LOAD_OFFSETS:-1}
COPY_CALIB_DATA=${COPY_CALIB_DATA:-1}
CALIBFIT_EXCITEV=${CALIBFIT_EXCITEV:-18.0}

BOLO_GAIN=${BOLO_GAIN:-1V2}
case "$BOLO_GAIN" in
    1V2|2V5|5V0|10V)
        :
        ;;
    *)
        echo "Invalid BOLO_GAIN value: should be 1V2, 2V5, 5V0 or 10V"
        exit 1
        ;;
esac

reset.dsp

# For non-default calibfit operation eg
# calibfit [-C cooling_theshold] [-H heating_threshold] [-t t_wait] [-T tau_guess]
# edit /mnt/local/sysconfig/bolo.sh to suit
# CALIBFIT_ARGS="-H 0.85"
# Remove previous calibration results: we're only interested in the latest
rm -f /tmp/calibfit.log

[ -n "$CALIBFITARGS" ] && echo "custom CALIBFITARGS $CALIBFITARGS"

rv() {
        [ "$BOLO_VERBOSE" -eq 1 ] && echo "$@"
        "$@"
}


set_gains_reset_os_dacs() {

	sites=$(set.site 0 distributor | awk '{print $2}' | grep -o '[1-6]')
	for site in $sites; do
            set.site "$site" B8:GAIN:[1-8] "$BOLO_GAIN" > /dev/null
	done

	echo 1 | tee /dev/bolo8/*/OS_DAC_RESETn > /dev/null
	echo 0 | tee /dev/bolo8/*/OS_DAC_RESETn > /dev/null
}


[ "$BOLO_VERBOSE" -eq 1 ] && echo "Setting GAINS to $BOLO_GAIN and reset OSDACs before running."
set_gains_reset_os_dacs

[ "$BOLO_VERBOSE" -eq 1 ] && echo "calibration starts for channels \"$BOLO_ACTIVE_CHAN\""


if [ "$BOLO_LOAD_OFFSETS" -eq 1 ]; then
for ch in $BOLO_ACTIVE_CHAN
do
         load_offset_channel.tcl "$ch" 0 0 1
done
fi

reset.dsp

tcool=$(set.site 14 TCOOL)
theat=$(set.site 14 THEAT)
twait=$(set.site 14 TWAIT)
nsamples=$(awk "BEGIN { print int(($twait + $theat + $tcool) * 1e4) }")
post="$((nsamples > 100000 ? nsamples : 100000))"

# System must be set up for soft trigger for calibration
orig_trg=$(get.site 1 trg | cut -d' ' -f1)
set.site 1 trg=1,1,1
orig_transient=$(set.site 0 transient)
set.site 0 "transient POST=$post SOFT_TRIGGER=0; set_arm"
wait_until_state 1

bolo_calibration

[ "$BOLO_VERBOSE" -eq 1 ] && echo "Fitting data"
export CALIBFIT_EXCITEV
/usr/local/bin/calibfit.py -t -n "$nsamples" -g "$BOLO_GAIN" $CALIBFITARGS $BOLO_ACTIVE_CHAN > /tmp/calibfit.log
[ "$BOLO_VERBOSE" -eq 1 ] && cat /tmp/calibfit.log

# Copy calib data so it doesn't get overwritten
if [ "$COPY_CALIB_DATA" -eq 1 ]
then
    mkdir -p /tmp/calib_data
    for ch in $BOLO_ACTIVE_CHAN
    do
        site=$(((ch - 1) / 8 + 1))
        mkdir -p /tmp/calib_data/${site}
        ubol_chan=$(((ch - 1) % 8 * 3 + 1))
        phi_chan=$((ubol_chan + 1))
        dc_chan=$((phi_chan + 1))
        for chan in $ubol_chan $phi_chan $dc_chan
        do
            # 0-Pad to 2 digits
            pad=$(printf "%02d" $chan)
            cp "/dev/acq400/data/${site}/${pad}" "/tmp/calib_data/${site}/${pad}"
        done
    done
fi

if [ "$LOAD_POWER_FILTERS" -eq 1 ]; then
    # Start running data through the filters so we can load multiple power filters
    set.site 0 transient PRE=1000 SOFT_TRIGGER=1
    set.site 0 set_arm
    wait_until_state 2
    while read -r ch sens tau ioff qoff
    do
        rv power_filter_design.tcl "$ch" "$sens" "$tau"
        rv wait_for_filters nospawn
    done < /tmp/calibfit.log
    set.site 0 set_abort
fi

if [ "$BOLO_LOAD_OFFSETS" -eq 1 ]; then
    while read -r ch sens tau ioff qoff
    do
        rv load_offset_channel.tcl "$ch" "$ioff" "$qoff" "$sens"
    done < /tmp/calibfit.log
fi

reset.dsp

# Restore previous triggering and transient setup.
set.site 1 "$orig_trg"
set.site 0 transient "$orig_transient"

/usr/local/bin/web_diagnostics_cal
/usr/local/bin/web_diagnostics_ram
echo "END"
